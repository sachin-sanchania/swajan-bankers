- DC-797 : Beta Connectedcrafts -> Admin Panel > Click on Companies > Shows internal server error message.
    - Sometime shows internal server error
- DC-796 : Beta Connectedcrafts -> Link redirection issues -> redirects to app.connectedcrafts.de application.



I have changed memory size from 128MB to 256MB and timeout from 3 second to 6 second




hubspotutk=3a8b872a773f14cf2dc2c7b01ae6a302; _gcl_au=1.1.548261369.1720459828; _ga=GA1.1.1836919910.1720459828; hubspotutk=3a8b872a773f14cf2dc2c7b01ae6a302; _hjSessionUser_3894433=eyJpZCI6IjdmY2JmNGFkLTU3YWItNWJjYy1iYjZkLWY4M2E1ZjZiNzBkZiIsImNyZWF0ZWQiOjE3MjA0NTk4MzE0NTEsImV4aXN0aW5nIjp0cnVlfQ==; WG_CHOOSE_ORIGINAL=1; _ga_5P0SGE5K78=deleted; craft_lang=en; craft_lang=en; __hstc=196145139.3a8b872a773f14cf2dc2c7b01ae6a302.1710064286571.1724423130912.1724784221209.33; __cmpconsentx71370=CQEDQ-QQEDQ-QAfVaBENBDFgAAAAAAAAAAigAAAAAAAA; __cmpcvcx71370=__s1052_s40_s65_s23_s7_s1_s26_s2612_s135_s905_c45500_s46_s10_s1475_s1442_s3031_c45498_c24276_c45499_U__; __cmpcpcx71370=__1_2_3_4__; _hjSession_3894433=eyJpZCI6IjIwYzlhNmRiLTc5NzUtNDJiZC05NDVjLWM0OTA5NDZjMmIxYyIsImMiOjE3MjQ5OTQzMTQyNzksInMiOjAsInIiOjAsInNiIjowLCJzciI6MCwic2UiOjAsImZzIjowLCJzcCI6MX0=; __hssrc=1; __hstc=196145139.3a8b872a773f14cf2dc2c7b01ae6a302.1710064286571.1724423130912.1724784221209.33; __hssc=196145139.13.1724994315309; _ga_5P0SGE5K78=GS1.1.1724994314.32.1.1724998537.0.0.0; XSRF-TOKEN=eyJpdiI6Imt0enVkZCtJcFFWQ3hSNVplT1krdHc9PSIsInZhbHVlIjoieWhPT2ZMN1A0VFhYbENRMUVWVk50cGJ2bmJPc1dIcU0zL2FXOGwwb1V6T3JNTVR5TUE0ZmZhcGZab0J1WXlRdDRhRjdKODZDeXRIKzNpZTFKWlBBeUVLSHdvMnAycUJ5V3QrVWZOMFpSR1hqYkFTckplSVhGTzE1ejNDL3dYalYiLCJtYWMiOiJhMjU3ZDkwMGZlYzkzMTg4ZjY0ZDNlYzU4MzU2MTcyMTE5NDAzZjg0ZTM0MDQ3YjdlMTdiZjJiY2Y5NTAyZTEzIiwidGFnIjoiIn0%3D; craftle_session_db=eyJpdiI6Ii9lMUU2bTMwOVVGMEhmNjBkaE9pK1E9PSIsInZhbHVlIjoiVThQN3FpN3V2YmFKdytPM3VVWXhlQWxsc2hPQlR0d0o1K3ZtQXVlL0FnbWY4RCtvMG82Q28wUXBrZXY2SGlmb1Y4NklveW5tWDREODdzNU9ReHJJT3pRNlJuVjA0cEI4K2t2eWdzSVhoOXBqMWgzRWdBK2ZSQnYvV0dTNWRxWGkiLCJtYWMiOiIwZjExMjAxN2QyOTE5MGY1NmMzMWE2NTE1ZGFiMDg2YzJhZTc4MmJhNjZiNmYyNDQ0MDQ3N2M2MDcyOTQ4Mzg5IiwidGFnIjoiIn0%3D


__cmpcc=1; _hjSession_3894433=eyJpZCI6IjU4YWM2NmM5LTU0YjMtNGQ4ZS05ZGQxLTQ2MTMyYjc3MTA0NiIsImMiOjE3MjQ5OTU2ODA4NjIsInMiOjAsInIiOjAsInNiIjowLCJzciI6MCwic2UiOjAsImZzIjoxLCJzcCI6MH0=; __cmpconsentx71370=CQEJ22QQEJ22QAfVaBENBFFgAAAAAAAAAAigAAAAAAAA; __cmpcvcx71370=__s1052_s40_s65_s23_s7_s1_s26_s2612_s135_s905_c45500_s46_s10_s1475_s1442_s3031_c45498_c24276_c45499_U__; __cmpcpcx71370=__1_2_3_4__; _gcl_au=1.1.1961176049.1724995683; _ga=GA1.1.955866315.1724995683; _fbp=fb.1.1724995683030.786784808980387598; __hstc=196145139.770009c837a816d066ab21cc0d6606af.1724995683637.1724995683637.1724995683637.1; hubspotutk=770009c837a816d066ab21cc0d6606af; __hssrc=1; _hjSessionUser_3894433=eyJpZCI6IjBiZGVmM2E2LTA3ODYtNWYyZC1hNjRlLWI1ZTY5MGFkYmYwZSIsImNyZWF0ZWQiOjE3MjQ5OTU2ODA4NjEsImV4aXN0aW5nIjp0cnVlfQ==; __hssc=196145139.6.1724995683638; _ga_5P0SGE5K78=GS1.1.1724995682.1.1.1724998413.0.0.0; craftle_session_db=eyJpdiI6Ikg1elpSNzZ6T21HRnRRMENiUXhSZmc9PSIsInZhbHVlIjoiK1dzKy9kUlFHRDYxL2Zmek1rL3NRU1JzUmplWkcySXhpaUdlSkc2WkEreCtxUFR1a0F6aHVEbko1c3JWNlVIQ2lDTlNHTExVKzkxL2JEdTh6MXY2OXpxZVNzK0s5MmZHeWdRS0ZKMjFSb3Jaa3pIU2FtR0R0enB0b1Z3OFBIT0MiLCJtYWMiOiJmZTgzMTYyMGQ1OTg1ZTUzMzQwODcyMzgyMzdlNWFiYzI0NTgzNTU3NzM5MzNmODU2MjBhYjAxOTM5M2I4ZTFiIiwidGFnIjoiIn0%3D

__cmpcc=1; _hjSession_3894433=eyJpZCI6IjU4YWM2NmM5LTU0YjMtNGQ4ZS05ZGQxLTQ2MTMyYjc3MTA0NiIsImMiOjE3MjQ5OTU2ODA4NjIsInMiOjAsInIiOjAsInNiIjowLCJzciI6MCwic2UiOjAsImZzIjoxLCJzcCI6MH0=; __cmpconsentx71370=CQEJ22QQEJ22QAfVaBENBFFgAAAAAAAAAAigAAAAAAAA; __cmpcvcx71370=__s1052_s40_s65_s23_s7_s1_s26_s2612_s135_s905_c45500_s46_s10_s1475_s1442_s3031_c45498_c24276_c45499_U__; __cmpcpcx71370=__1_2_3_4__; _gcl_au=1.1.1961176049.1724995683; _ga=GA1.1.955866315.1724995683; _fbp=fb.1.1724995683030.786784808980387598; __hstc=196145139.770009c837a816d066ab21cc0d6606af.1724995683637.1724995683637.1724995683637.1; hubspotutk=770009c837a816d066ab21cc0d6606af; __hssrc=1; _hjSessionUser_3894433=eyJpZCI6IjBiZGVmM2E2LTA3ODYtNWYyZC1hNjRlLWI1ZTY5MGFkYmYwZSIsImNyZWF0ZWQiOjE3MjQ5OTU2ODA4NjEsImV4aXN0aW5nIjp0cnVlfQ==; __hssc=196145139.7.1724995683638; _ga_5P0SGE5K78=GS1.1.1724995682.1.1.1724999355.0.0.0; craftle_session_db=eyJpdiI6IlpHMnYydHJQdUhoeTQ3TjE3N0FTc2c9PSIsInZhbHVlIjoiTkpRS1FSWUlYdHZleGZlK003OXFXdzE3aHc2OThuZThBNTJjclh4QkI3aW5GQ2NwZ2F4Y2ZZU2tvY0hFalU1dGhzcGdDSmJTUG50VmY1RFFwMGRpMnBhdG1SdXZCbWw2WVZYRUdmWWRCRHFtcGlpTjloRmk3Vy9HR0krZDRzY1EiLCJtYWMiOiJhNGQ0YTk2Zjc3NjUzMmRlMjc1YzhmN2Y2OWJjYmEzZDc5NDQwMWQxMTVkZDFmZTAwYzBiOTcxNzk4YTYwMjU0IiwidGFnIjoiIn0%3D



/* global fetch */
// Define domain constants
const WEB_DOMAIN = 'www.connectedcrafts.de';
const APP_DOMAIN = 'app.connectedcrafts.de';
const MAIN_DOMAIN = 'beta.connectedcrafts.de'; // This is the domain to replace with
 
export const handler = async (event) => {
    console.log('Received event:', JSON.stringify(event, null, 2));
 
    const path = event.rawPath || event.path || '/';
    const queryString = new URLSearchParams(event?.queryStringParameters ?? {}).toString(); 
    const segments = path.split('/').filter(Boolean);
    const lang = segments[0];
    let targetUrl;
    const remainingPath = segments?.slice?.(1)?.join?.('/') || '';
    if (!lang) {
        targetUrl = new URL(path, `https://${APP_DOMAIN}/en/`).toString();
    } else if (path.includes('livewire') || path.includes('auth') || path.includes('broadcasting')) {
        targetUrl = new URL(path, `https://${APP_DOMAIN}/`).toString();
    } else if (remainingPath.startsWith('app')) {
        if (remainingPath === 'app/' || remainingPath === 'app') {
            console.log('Redirecting to:', `https://${MAIN_DOMAIN}/${lang}/`);
            return {
                statusCode: 301,
                headers: {
                    Location: `https://${MAIN_DOMAIN}/${lang}/`,
                },
                body: null,
            };
        }
        targetUrl = `https://${APP_DOMAIN}/${lang}/app/${remainingPath.replace('app/', '')}`;
    } else if (remainingPath) {
        targetUrl = `https://${WEB_DOMAIN}/${lang}/${remainingPath}`;
    } else {
        targetUrl = `https://${APP_DOMAIN}/${lang}/`;
    }
 
    console.log('Target URL:', targetUrl);
 
    const headers = {
        ...event.headers,
        'X-Forwarded-For': event.requestContext?.identity?.sourceIp || '',
        'X-Forwarded-Proto': event?.headers?.['X-Forwarded-Proto'] || 'https', // Default to 'https' if undefined
        'X-Forwarded-Host': event?.headers?.['Host'],
    };
 
    console.log('Request headers:', JSON.stringify(headers, null, 2));
 
    try {
        if (queryString) {
            targetUrl += `?${queryString}`;
        }
        const response = await fetch(targetUrl, {
            method: event.httpMethod,
            headers: headers,
            body: event.body ? (event.isBase64Encoded ? Buffer.from(event.body, 'base64').toString() : event.body) : undefined,
            redirect: 'manual', // Prevent fetch from automatically following redirects
        });
 
        console.log('Response status:', response.status);
        console.log('Response headers:', JSON.stringify([...response.headers], null, 2));
 
        let responseHeaders = {};
        response.headers.forEach((value, key) => {
            if (key.toLowerCase() === 'content-encoding' || key.toLowerCase() === 'transfer-encoding') {
                return;
            }
            // Handle Location header specifically for redirects
            if (key.toLowerCase() === 'location') {
                const updatedLocation = value
                    .replace(new RegExp(WEB_DOMAIN, 'g'), MAIN_DOMAIN)
                    .replace(new RegExp(APP_DOMAIN, 'g'), MAIN_DOMAIN);
                responseHeaders[key] = updatedLocation;
                console.log('Updated Location header:', updatedLocation);
            } else {
                responseHeaders[key] = value;
            }
        });
 
        let responseBody = await response.text();
        console.log('Response body before replacement:', responseBody);
 
        if (response.status >= 200 && response.status < 300) {
            responseBody = responseBody
                .replace(new RegExp(WEB_DOMAIN, 'g'), MAIN_DOMAIN)
                .replace(new RegExp(APP_DOMAIN, 'g'), MAIN_DOMAIN);
            console.log('Response body after replacement:', responseBody);
        }
 
        return {
            statusCode: response.status,
            headers: responseHeaders,
            body: responseBody,
            isBase64Encoded: false,
        };
    } catch (error) {
        console.error('Fetch error:', error);
        return {
            statusCode: 502,
            body: `Proxy request failed: ${error.message}`,
        };
    }
};

if (event.headers['Content-Type'] && event.headers['Content-Type'].startsWith('image/')) {  
  // Handle image upload  
  const response = await fetch(targetUrl, {  
  method: event.httpMethod,  
  headers: headers,  
  body: event.body ? (event.isBase64Encoded ? Buffer.from(event.body, 'base64') : event.body) : undefined,  
  redirect: 'manual',  
  });  
} else {  
  // Handle non-image request  
  const response = await fetch(targetUrl, {  
  method: event.httpMethod,  
  headers: headers,  
  body: event.body ? (event.isBase64Encoded ? Buffer.from(event.body, 'base64').toString() : event.body) : undefined,  
  redirect: 'manual',  
  });  
}

if (event.headers['Content-Type'] && event.headers['Content-Type'].startsWith('image/')) {  
  // Handle image upload  
  const response = await fetch(targetUrl, {  
  method: event.httpMethod,  
  headers: headers,  
  body: event.body ? (event.isBase64Encoded ? Buffer.from(event.body, 'base64') : event.body) : undefined,  
  redirect: 'manual',  
  });  
} else {  
  // Handle non-image request  
  const response = await fetch(targetUrl, {  
  method: event.httpMethod,  
  headers: headers,  
  body: event.body ? (event.isBase64Encoded ? Buffer.from(event.body, 'base64').toString() : event.body) : undefined,  
  redirect: 'manual',  
  });  
}
